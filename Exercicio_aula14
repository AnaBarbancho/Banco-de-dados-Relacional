-- Exercicio 1
CREATE FUNCTION atualizar_qtd_projetos()
RETURNS TRIGGER 
LANGUAGE plpgsql 
AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        UPDATE tbl_departamentos
        SET qtd_projetos = qtd_projetos - 1
        WHERE cod_departamento = OLD.cod_departamento;
    END IF;
    RETURN NULL;
END
$$;

CREATE TRIGGER trig_atualizar_qtd_projetos
AFTER DELETE ON tbl_projetos
FOR EACH ROW
EXECUTE FUNCTION atualizar_qtd_projetos();

--Exercicio 2
CREATE FUNCTION atualizar_qtd_projetos()
RETURNS TRIGGER 
LANGUAGE plpgsql AS 
$$
BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE tbl_departamentos
        SET qtd_projetos = qtd_projetos + 1
        WHERE cod_departamento = NEW.cod_departamento;
    END IF;
    RETURN NULL;
END
$$;

CREATE TRIGGER trig_atualizar_qtd_projetos
AFTER INSERT ON tbl_projetos
FOR EACH ROW
EXECUTE FUNCTION atualizar_qtd_projetos();


--Exercicio 3
CREATE TABLE tbl_empregado_historico_salario (
    cod_empregado INT,
    salario REAL,
    data TIMESTAMP DEFAULT NOW()
);

CREATE FUNCTION salvar_salario_atual()
RETURNS TRIGGER 
LANGUAGE plpgsql AS 
$$
BEGIN
    INSERT INTO tbl_empregado_historico_salario (cod_empregado, salario)
    VALUES (NEW.cod_empregado, NEW.salario);
    RETURN NEW;
END
$$;

CREATE TRIGGER trig_salvar_salario_atual
AFTER UPDATE OF salario ON tbl_empregados
FOR EACH ROW
EXECUTE FUNCTION salvar_salario_atual();


--Exerc√≠cio 4 
ALTER TABLE tbl_empregados ADD COLUMN data_atualizacao TIMESTAMP;

CREATE FUNCTION atualizar_data_atualizacao()
RETURNS TRIGGER 
LANGUAGE plpgsql AS 
$$
BEGIN
    NEW.data_atualizacao := NOW();
    RETURN NEW;
END
$$;

CREATE TRIGGER trig_atualizar_data_atualizacao
BEFORE UPDATE ON tbl_empregados
FOR EACH ROW
EXECUTE FUNCTION atualizar_data_atualizacao();
